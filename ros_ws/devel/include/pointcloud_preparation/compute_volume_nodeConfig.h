//#line 2 "/opt/ros/melodic/share/dynamic_reconfigure/cmake/../templates/ConfigType.h.template"
// *********************************************************
//
// File autogenerated for the pointcloud_preparation package
// by the dynamic_reconfigure package.
// Please do not edit.
//
// ********************************************************/

#ifndef __pointcloud_preparation__COMPUTE_VOLUME_NODECONFIG_H__
#define __pointcloud_preparation__COMPUTE_VOLUME_NODECONFIG_H__

#if __cplusplus >= 201103L
#define DYNAMIC_RECONFIGURE_FINAL final
#else
#define DYNAMIC_RECONFIGURE_FINAL
#endif

#include <dynamic_reconfigure/config_tools.h>
#include <limits>
#include <ros/node_handle.h>
#include <dynamic_reconfigure/ConfigDescription.h>
#include <dynamic_reconfigure/ParamDescription.h>
#include <dynamic_reconfigure/Group.h>
#include <dynamic_reconfigure/config_init_mutex.h>
#include <boost/any.hpp>

namespace pointcloud_preparation
{
  class compute_volume_nodeConfigStatics;

  class compute_volume_nodeConfig
  {
  public:
    class AbstractParamDescription : public dynamic_reconfigure::ParamDescription
    {
    public:
      AbstractParamDescription(std::string n, std::string t, uint32_t l,
          std::string d, std::string e)
      {
        name = n;
        type = t;
        level = l;
        description = d;
        edit_method = e;
      }

      virtual void clamp(compute_volume_nodeConfig &config, const compute_volume_nodeConfig &max, const compute_volume_nodeConfig &min) const = 0;
      virtual void calcLevel(uint32_t &level, const compute_volume_nodeConfig &config1, const compute_volume_nodeConfig &config2) const = 0;
      virtual void fromServer(const ros::NodeHandle &nh, compute_volume_nodeConfig &config) const = 0;
      virtual void toServer(const ros::NodeHandle &nh, const compute_volume_nodeConfig &config) const = 0;
      virtual bool fromMessage(const dynamic_reconfigure::Config &msg, compute_volume_nodeConfig &config) const = 0;
      virtual void toMessage(dynamic_reconfigure::Config &msg, const compute_volume_nodeConfig &config) const = 0;
      virtual void getValue(const compute_volume_nodeConfig &config, boost::any &val) const = 0;
    };

    typedef boost::shared_ptr<AbstractParamDescription> AbstractParamDescriptionPtr;
    typedef boost::shared_ptr<const AbstractParamDescription> AbstractParamDescriptionConstPtr;

    // Final keyword added to class because it has virtual methods and inherits
    // from a class with a non-virtual destructor.
    template <class T>
    class ParamDescription DYNAMIC_RECONFIGURE_FINAL : public AbstractParamDescription
    {
    public:
      ParamDescription(std::string a_name, std::string a_type, uint32_t a_level,
          std::string a_description, std::string a_edit_method, T compute_volume_nodeConfig::* a_f) :
        AbstractParamDescription(a_name, a_type, a_level, a_description, a_edit_method),
        field(a_f)
      {}

      T compute_volume_nodeConfig::* field;

      virtual void clamp(compute_volume_nodeConfig &config, const compute_volume_nodeConfig &max, const compute_volume_nodeConfig &min) const
      {
        if (config.*field > max.*field)
          config.*field = max.*field;

        if (config.*field < min.*field)
          config.*field = min.*field;
      }

      virtual void calcLevel(uint32_t &comb_level, const compute_volume_nodeConfig &config1, const compute_volume_nodeConfig &config2) const
      {
        if (config1.*field != config2.*field)
          comb_level |= level;
      }

      virtual void fromServer(const ros::NodeHandle &nh, compute_volume_nodeConfig &config) const
      {
        nh.getParam(name, config.*field);
      }

      virtual void toServer(const ros::NodeHandle &nh, const compute_volume_nodeConfig &config) const
      {
        nh.setParam(name, config.*field);
      }

      virtual bool fromMessage(const dynamic_reconfigure::Config &msg, compute_volume_nodeConfig &config) const
      {
        return dynamic_reconfigure::ConfigTools::getParameter(msg, name, config.*field);
      }

      virtual void toMessage(dynamic_reconfigure::Config &msg, const compute_volume_nodeConfig &config) const
      {
        dynamic_reconfigure::ConfigTools::appendParameter(msg, name, config.*field);
      }

      virtual void getValue(const compute_volume_nodeConfig &config, boost::any &val) const
      {
        val = config.*field;
      }
    };

    class AbstractGroupDescription : public dynamic_reconfigure::Group
    {
      public:
      AbstractGroupDescription(std::string n, std::string t, int p, int i, bool s)
      {
        name = n;
        type = t;
        parent = p;
        state = s;
        id = i;
      }

      std::vector<AbstractParamDescriptionConstPtr> abstract_parameters;
      bool state;

      virtual void toMessage(dynamic_reconfigure::Config &msg, const boost::any &config) const = 0;
      virtual bool fromMessage(const dynamic_reconfigure::Config &msg, boost::any &config) const =0;
      virtual void updateParams(boost::any &cfg, compute_volume_nodeConfig &top) const= 0;
      virtual void setInitialState(boost::any &cfg) const = 0;


      void convertParams()
      {
        for(std::vector<AbstractParamDescriptionConstPtr>::const_iterator i = abstract_parameters.begin(); i != abstract_parameters.end(); ++i)
        {
          parameters.push_back(dynamic_reconfigure::ParamDescription(**i));
        }
      }
    };

    typedef boost::shared_ptr<AbstractGroupDescription> AbstractGroupDescriptionPtr;
    typedef boost::shared_ptr<const AbstractGroupDescription> AbstractGroupDescriptionConstPtr;

    // Final keyword added to class because it has virtual methods and inherits
    // from a class with a non-virtual destructor.
    template<class T, class PT>
    class GroupDescription DYNAMIC_RECONFIGURE_FINAL : public AbstractGroupDescription
    {
    public:
      GroupDescription(std::string a_name, std::string a_type, int a_parent, int a_id, bool a_s, T PT::* a_f) : AbstractGroupDescription(a_name, a_type, a_parent, a_id, a_s), field(a_f)
      {
      }

      GroupDescription(const GroupDescription<T, PT>& g): AbstractGroupDescription(g.name, g.type, g.parent, g.id, g.state), field(g.field), groups(g.groups)
      {
        parameters = g.parameters;
        abstract_parameters = g.abstract_parameters;
      }

      virtual bool fromMessage(const dynamic_reconfigure::Config &msg, boost::any &cfg) const
      {
        PT* config = boost::any_cast<PT*>(cfg);
        if(!dynamic_reconfigure::ConfigTools::getGroupState(msg, name, (*config).*field))
          return false;

        for(std::vector<AbstractGroupDescriptionConstPtr>::const_iterator i = groups.begin(); i != groups.end(); ++i)
        {
          boost::any n = &((*config).*field);
          if(!(*i)->fromMessage(msg, n))
            return false;
        }

        return true;
      }

      virtual void setInitialState(boost::any &cfg) const
      {
        PT* config = boost::any_cast<PT*>(cfg);
        T* group = &((*config).*field);
        group->state = state;

        for(std::vector<AbstractGroupDescriptionConstPtr>::const_iterator i = groups.begin(); i != groups.end(); ++i)
        {
          boost::any n = boost::any(&((*config).*field));
          (*i)->setInitialState(n);
        }

      }

      virtual void updateParams(boost::any &cfg, compute_volume_nodeConfig &top) const
      {
        PT* config = boost::any_cast<PT*>(cfg);

        T* f = &((*config).*field);
        f->setParams(top, abstract_parameters);

        for(std::vector<AbstractGroupDescriptionConstPtr>::const_iterator i = groups.begin(); i != groups.end(); ++i)
        {
          boost::any n = &((*config).*field);
          (*i)->updateParams(n, top);
        }
      }

      virtual void toMessage(dynamic_reconfigure::Config &msg, const boost::any &cfg) const
      {
        const PT config = boost::any_cast<PT>(cfg);
        dynamic_reconfigure::ConfigTools::appendGroup<T>(msg, name, id, parent, config.*field);

        for(std::vector<AbstractGroupDescriptionConstPtr>::const_iterator i = groups.begin(); i != groups.end(); ++i)
        {
          (*i)->toMessage(msg, config.*field);
        }
      }

      T PT::* field;
      std::vector<compute_volume_nodeConfig::AbstractGroupDescriptionConstPtr> groups;
    };

class DEFAULT
{
  public:
    DEFAULT()
    {
      state = true;
      name = "Default";
    }

    void setParams(compute_volume_nodeConfig &config, const std::vector<AbstractParamDescriptionConstPtr> params)
    {
      for (std::vector<AbstractParamDescriptionConstPtr>::const_iterator _i = params.begin(); _i != params.end(); ++_i)
      {
        boost::any val;
        (*_i)->getValue(config, val);

        if("selection_camera"==(*_i)->name){selection_camera = boost::any_cast<double>(val);}
        if("nr_points_initial"==(*_i)->name){nr_points_initial = boost::any_cast<double>(val);}
        if("dividing_number"==(*_i)->name){dividing_number = boost::any_cast<double>(val);}
        if("perpendicular_threshold"==(*_i)->name){perpendicular_threshold = boost::any_cast<double>(val);}
        if("parallel_threshold"==(*_i)->name){parallel_threshold = boost::any_cast<double>(val);}
        if("threshold_x"==(*_i)->name){threshold_x = boost::any_cast<double>(val);}
        if("threshold_y"==(*_i)->name){threshold_y = boost::any_cast<double>(val);}
        if("threshold_z"==(*_i)->name){threshold_z = boost::any_cast<double>(val);}
        if("minimum_nr_points"==(*_i)->name){minimum_nr_points = boost::any_cast<double>(val);}
        if("z_lower_limit"==(*_i)->name){z_lower_limit = boost::any_cast<double>(val);}
        if("z_upper_limit"==(*_i)->name){z_upper_limit = boost::any_cast<double>(val);}
        if("x_lower_limit"==(*_i)->name){x_lower_limit = boost::any_cast<double>(val);}
        if("x_upper_limit"==(*_i)->name){x_upper_limit = boost::any_cast<double>(val);}
        if("y_lower_limit"==(*_i)->name){y_lower_limit = boost::any_cast<double>(val);}
        if("y_upper_limit"==(*_i)->name){y_upper_limit = boost::any_cast<double>(val);}
        if("angle_threshold"==(*_i)->name){angle_threshold = boost::any_cast<double>(val);}
        if("real_volume"==(*_i)->name){real_volume = boost::any_cast<double>(val);}
      }
    }

    double selection_camera;
double nr_points_initial;
double dividing_number;
double perpendicular_threshold;
double parallel_threshold;
double threshold_x;
double threshold_y;
double threshold_z;
double minimum_nr_points;
double z_lower_limit;
double z_upper_limit;
double x_lower_limit;
double x_upper_limit;
double y_lower_limit;
double y_upper_limit;
double angle_threshold;
double real_volume;

    bool state;
    std::string name;

    
}groups;



//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      double selection_camera;
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      double nr_points_initial;
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      double dividing_number;
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      double perpendicular_threshold;
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      double parallel_threshold;
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      double threshold_x;
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      double threshold_y;
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      double threshold_z;
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      double minimum_nr_points;
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      double z_lower_limit;
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      double z_upper_limit;
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      double x_lower_limit;
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      double x_upper_limit;
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      double y_lower_limit;
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      double y_upper_limit;
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      double angle_threshold;
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      double real_volume;
//#line 228 "/opt/ros/melodic/share/dynamic_reconfigure/cmake/../templates/ConfigType.h.template"

    bool __fromMessage__(dynamic_reconfigure::Config &msg)
    {
      const std::vector<AbstractParamDescriptionConstPtr> &__param_descriptions__ = __getParamDescriptions__();
      const std::vector<AbstractGroupDescriptionConstPtr> &__group_descriptions__ = __getGroupDescriptions__();

      int count = 0;
      for (std::vector<AbstractParamDescriptionConstPtr>::const_iterator i = __param_descriptions__.begin(); i != __param_descriptions__.end(); ++i)
        if ((*i)->fromMessage(msg, *this))
          count++;

      for (std::vector<AbstractGroupDescriptionConstPtr>::const_iterator i = __group_descriptions__.begin(); i != __group_descriptions__.end(); i ++)
      {
        if ((*i)->id == 0)
        {
          boost::any n = boost::any(this);
          (*i)->updateParams(n, *this);
          (*i)->fromMessage(msg, n);
        }
      }

      if (count != dynamic_reconfigure::ConfigTools::size(msg))
      {
        ROS_ERROR("compute_volume_nodeConfig::__fromMessage__ called with an unexpected parameter.");
        ROS_ERROR("Booleans:");
        for (unsigned int i = 0; i < msg.bools.size(); i++)
          ROS_ERROR("  %s", msg.bools[i].name.c_str());
        ROS_ERROR("Integers:");
        for (unsigned int i = 0; i < msg.ints.size(); i++)
          ROS_ERROR("  %s", msg.ints[i].name.c_str());
        ROS_ERROR("Doubles:");
        for (unsigned int i = 0; i < msg.doubles.size(); i++)
          ROS_ERROR("  %s", msg.doubles[i].name.c_str());
        ROS_ERROR("Strings:");
        for (unsigned int i = 0; i < msg.strs.size(); i++)
          ROS_ERROR("  %s", msg.strs[i].name.c_str());
        // @todo Check that there are no duplicates. Make this error more
        // explicit.
        return false;
      }
      return true;
    }

    // This version of __toMessage__ is used during initialization of
    // statics when __getParamDescriptions__ can't be called yet.
    void __toMessage__(dynamic_reconfigure::Config &msg, const std::vector<AbstractParamDescriptionConstPtr> &__param_descriptions__, const std::vector<AbstractGroupDescriptionConstPtr> &__group_descriptions__) const
    {
      dynamic_reconfigure::ConfigTools::clear(msg);
      for (std::vector<AbstractParamDescriptionConstPtr>::const_iterator i = __param_descriptions__.begin(); i != __param_descriptions__.end(); ++i)
        (*i)->toMessage(msg, *this);

      for (std::vector<AbstractGroupDescriptionConstPtr>::const_iterator i = __group_descriptions__.begin(); i != __group_descriptions__.end(); ++i)
      {
        if((*i)->id == 0)
        {
          (*i)->toMessage(msg, *this);
        }
      }
    }

    void __toMessage__(dynamic_reconfigure::Config &msg) const
    {
      const std::vector<AbstractParamDescriptionConstPtr> &__param_descriptions__ = __getParamDescriptions__();
      const std::vector<AbstractGroupDescriptionConstPtr> &__group_descriptions__ = __getGroupDescriptions__();
      __toMessage__(msg, __param_descriptions__, __group_descriptions__);
    }

    void __toServer__(const ros::NodeHandle &nh) const
    {
      const std::vector<AbstractParamDescriptionConstPtr> &__param_descriptions__ = __getParamDescriptions__();
      for (std::vector<AbstractParamDescriptionConstPtr>::const_iterator i = __param_descriptions__.begin(); i != __param_descriptions__.end(); ++i)
        (*i)->toServer(nh, *this);
    }

    void __fromServer__(const ros::NodeHandle &nh)
    {
      static bool setup=false;

      const std::vector<AbstractParamDescriptionConstPtr> &__param_descriptions__ = __getParamDescriptions__();
      for (std::vector<AbstractParamDescriptionConstPtr>::const_iterator i = __param_descriptions__.begin(); i != __param_descriptions__.end(); ++i)
        (*i)->fromServer(nh, *this);

      const std::vector<AbstractGroupDescriptionConstPtr> &__group_descriptions__ = __getGroupDescriptions__();
      for (std::vector<AbstractGroupDescriptionConstPtr>::const_iterator i = __group_descriptions__.begin(); i != __group_descriptions__.end(); i++){
        if (!setup && (*i)->id == 0) {
          setup = true;
          boost::any n = boost::any(this);
          (*i)->setInitialState(n);
        }
      }
    }

    void __clamp__()
    {
      const std::vector<AbstractParamDescriptionConstPtr> &__param_descriptions__ = __getParamDescriptions__();
      const compute_volume_nodeConfig &__max__ = __getMax__();
      const compute_volume_nodeConfig &__min__ = __getMin__();
      for (std::vector<AbstractParamDescriptionConstPtr>::const_iterator i = __param_descriptions__.begin(); i != __param_descriptions__.end(); ++i)
        (*i)->clamp(*this, __max__, __min__);
    }

    uint32_t __level__(const compute_volume_nodeConfig &config) const
    {
      const std::vector<AbstractParamDescriptionConstPtr> &__param_descriptions__ = __getParamDescriptions__();
      uint32_t level = 0;
      for (std::vector<AbstractParamDescriptionConstPtr>::const_iterator i = __param_descriptions__.begin(); i != __param_descriptions__.end(); ++i)
        (*i)->calcLevel(level, config, *this);
      return level;
    }

    static const dynamic_reconfigure::ConfigDescription &__getDescriptionMessage__();
    static const compute_volume_nodeConfig &__getDefault__();
    static const compute_volume_nodeConfig &__getMax__();
    static const compute_volume_nodeConfig &__getMin__();
    static const std::vector<AbstractParamDescriptionConstPtr> &__getParamDescriptions__();
    static const std::vector<AbstractGroupDescriptionConstPtr> &__getGroupDescriptions__();

  private:
    static const compute_volume_nodeConfigStatics *__get_statics__();
  };

  template <> // Max and min are ignored for strings.
  inline void compute_volume_nodeConfig::ParamDescription<std::string>::clamp(compute_volume_nodeConfig &config, const compute_volume_nodeConfig &max, const compute_volume_nodeConfig &min) const
  {
    (void) config;
    (void) min;
    (void) max;
    return;
  }

  class compute_volume_nodeConfigStatics
  {
    friend class compute_volume_nodeConfig;

    compute_volume_nodeConfigStatics()
    {
compute_volume_nodeConfig::GroupDescription<compute_volume_nodeConfig::DEFAULT, compute_volume_nodeConfig> Default("Default", "", 0, 0, true, &compute_volume_nodeConfig::groups);
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.selection_camera = 1.0;
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.selection_camera = 2.0;
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.selection_camera = 1.0;
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(compute_volume_nodeConfig::AbstractParamDescriptionConstPtr(new compute_volume_nodeConfig::ParamDescription<double>("selection_camera", "double", 1, "Select camera", "", &compute_volume_nodeConfig::selection_camera)));
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(compute_volume_nodeConfig::AbstractParamDescriptionConstPtr(new compute_volume_nodeConfig::ParamDescription<double>("selection_camera", "double", 1, "Select camera", "", &compute_volume_nodeConfig::selection_camera)));
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.nr_points_initial = 0.0;
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.nr_points_initial = 20000.0;
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.nr_points_initial = 100.0;
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(compute_volume_nodeConfig::AbstractParamDescriptionConstPtr(new compute_volume_nodeConfig::ParamDescription<double>("nr_points_initial", "double", 1, "Nr_points_input_pointcloud", "", &compute_volume_nodeConfig::nr_points_initial)));
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(compute_volume_nodeConfig::AbstractParamDescriptionConstPtr(new compute_volume_nodeConfig::ParamDescription<double>("nr_points_initial", "double", 1, "Nr_points_input_pointcloud", "", &compute_volume_nodeConfig::nr_points_initial)));
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.dividing_number = 1.0;
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.dividing_number = 100.0;
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.dividing_number = 3.0;
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(compute_volume_nodeConfig::AbstractParamDescriptionConstPtr(new compute_volume_nodeConfig::ParamDescription<double>("dividing_number", "double", 1, "Nr_points_input_pointcloud", "", &compute_volume_nodeConfig::dividing_number)));
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(compute_volume_nodeConfig::AbstractParamDescriptionConstPtr(new compute_volume_nodeConfig::ParamDescription<double>("dividing_number", "double", 1, "Nr_points_input_pointcloud", "", &compute_volume_nodeConfig::dividing_number)));
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.perpendicular_threshold = 0.001;
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.perpendicular_threshold = 1.0;
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.perpendicular_threshold = 0.01;
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(compute_volume_nodeConfig::AbstractParamDescriptionConstPtr(new compute_volume_nodeConfig::ParamDescription<double>("perpendicular_threshold", "double", 1, "Perpendicular threshold", "", &compute_volume_nodeConfig::perpendicular_threshold)));
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(compute_volume_nodeConfig::AbstractParamDescriptionConstPtr(new compute_volume_nodeConfig::ParamDescription<double>("perpendicular_threshold", "double", 1, "Perpendicular threshold", "", &compute_volume_nodeConfig::perpendicular_threshold)));
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.parallel_threshold = 0.001;
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.parallel_threshold = 1.0;
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.parallel_threshold = 0.01;
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(compute_volume_nodeConfig::AbstractParamDescriptionConstPtr(new compute_volume_nodeConfig::ParamDescription<double>("parallel_threshold", "double", 1, "Parallel threshold", "", &compute_volume_nodeConfig::parallel_threshold)));
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(compute_volume_nodeConfig::AbstractParamDescriptionConstPtr(new compute_volume_nodeConfig::ParamDescription<double>("parallel_threshold", "double", 1, "Parallel threshold", "", &compute_volume_nodeConfig::parallel_threshold)));
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.threshold_x = 0.001;
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.threshold_x = 0.1;
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.threshold_x = 0.002;
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(compute_volume_nodeConfig::AbstractParamDescriptionConstPtr(new compute_volume_nodeConfig::ParamDescription<double>("threshold_x", "double", 1, "Threshold X", "", &compute_volume_nodeConfig::threshold_x)));
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(compute_volume_nodeConfig::AbstractParamDescriptionConstPtr(new compute_volume_nodeConfig::ParamDescription<double>("threshold_x", "double", 1, "Threshold X", "", &compute_volume_nodeConfig::threshold_x)));
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.threshold_y = 0.001;
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.threshold_y = 0.1;
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.threshold_y = 0.002;
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(compute_volume_nodeConfig::AbstractParamDescriptionConstPtr(new compute_volume_nodeConfig::ParamDescription<double>("threshold_y", "double", 1, "Threshold Y", "", &compute_volume_nodeConfig::threshold_y)));
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(compute_volume_nodeConfig::AbstractParamDescriptionConstPtr(new compute_volume_nodeConfig::ParamDescription<double>("threshold_y", "double", 1, "Threshold Y", "", &compute_volume_nodeConfig::threshold_y)));
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.threshold_z = 0.001;
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.threshold_z = 0.1;
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.threshold_z = 0.002;
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(compute_volume_nodeConfig::AbstractParamDescriptionConstPtr(new compute_volume_nodeConfig::ParamDescription<double>("threshold_z", "double", 1, "Threshold Z", "", &compute_volume_nodeConfig::threshold_z)));
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(compute_volume_nodeConfig::AbstractParamDescriptionConstPtr(new compute_volume_nodeConfig::ParamDescription<double>("threshold_z", "double", 1, "Threshold Z", "", &compute_volume_nodeConfig::threshold_z)));
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.minimum_nr_points = 0.0;
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.minimum_nr_points = 100.0;
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.minimum_nr_points = 10.0;
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(compute_volume_nodeConfig::AbstractParamDescriptionConstPtr(new compute_volume_nodeConfig::ParamDescription<double>("minimum_nr_points", "double", 1, "minimum_nr_points", "", &compute_volume_nodeConfig::minimum_nr_points)));
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(compute_volume_nodeConfig::AbstractParamDescriptionConstPtr(new compute_volume_nodeConfig::ParamDescription<double>("minimum_nr_points", "double", 1, "minimum_nr_points", "", &compute_volume_nodeConfig::minimum_nr_points)));
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.z_lower_limit = 0.0;
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.z_lower_limit = 15.0;
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.z_lower_limit = 0.0;
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(compute_volume_nodeConfig::AbstractParamDescriptionConstPtr(new compute_volume_nodeConfig::ParamDescription<double>("z_lower_limit", "double", 1, "Z Lower limit", "", &compute_volume_nodeConfig::z_lower_limit)));
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(compute_volume_nodeConfig::AbstractParamDescriptionConstPtr(new compute_volume_nodeConfig::ParamDescription<double>("z_lower_limit", "double", 1, "Z Lower limit", "", &compute_volume_nodeConfig::z_lower_limit)));
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.z_upper_limit = 0.0;
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.z_upper_limit = 50.0;
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.z_upper_limit = 3.0;
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(compute_volume_nodeConfig::AbstractParamDescriptionConstPtr(new compute_volume_nodeConfig::ParamDescription<double>("z_upper_limit", "double", 1, "Z Upper limit", "", &compute_volume_nodeConfig::z_upper_limit)));
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(compute_volume_nodeConfig::AbstractParamDescriptionConstPtr(new compute_volume_nodeConfig::ParamDescription<double>("z_upper_limit", "double", 1, "Z Upper limit", "", &compute_volume_nodeConfig::z_upper_limit)));
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.x_lower_limit = -1.5;
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.x_lower_limit = 0.0;
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.x_lower_limit = -0.5;
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(compute_volume_nodeConfig::AbstractParamDescriptionConstPtr(new compute_volume_nodeConfig::ParamDescription<double>("x_lower_limit", "double", 1, "X Lower limit", "", &compute_volume_nodeConfig::x_lower_limit)));
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(compute_volume_nodeConfig::AbstractParamDescriptionConstPtr(new compute_volume_nodeConfig::ParamDescription<double>("x_lower_limit", "double", 1, "X Lower limit", "", &compute_volume_nodeConfig::x_lower_limit)));
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.x_upper_limit = 0.0;
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.x_upper_limit = 1.5;
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.x_upper_limit = 0.5;
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(compute_volume_nodeConfig::AbstractParamDescriptionConstPtr(new compute_volume_nodeConfig::ParamDescription<double>("x_upper_limit", "double", 1, "X Upper limit", "", &compute_volume_nodeConfig::x_upper_limit)));
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(compute_volume_nodeConfig::AbstractParamDescriptionConstPtr(new compute_volume_nodeConfig::ParamDescription<double>("x_upper_limit", "double", 1, "X Upper limit", "", &compute_volume_nodeConfig::x_upper_limit)));
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.y_lower_limit = -1.5;
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.y_lower_limit = 0.0;
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.y_lower_limit = -0.5;
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(compute_volume_nodeConfig::AbstractParamDescriptionConstPtr(new compute_volume_nodeConfig::ParamDescription<double>("y_lower_limit", "double", 1, "Y Lower limit", "", &compute_volume_nodeConfig::y_lower_limit)));
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(compute_volume_nodeConfig::AbstractParamDescriptionConstPtr(new compute_volume_nodeConfig::ParamDescription<double>("y_lower_limit", "double", 1, "Y Lower limit", "", &compute_volume_nodeConfig::y_lower_limit)));
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.y_upper_limit = 0.0;
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.y_upper_limit = 1.5;
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.y_upper_limit = 0.5;
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(compute_volume_nodeConfig::AbstractParamDescriptionConstPtr(new compute_volume_nodeConfig::ParamDescription<double>("y_upper_limit", "double", 1, "Y Upper limit", "", &compute_volume_nodeConfig::y_upper_limit)));
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(compute_volume_nodeConfig::AbstractParamDescriptionConstPtr(new compute_volume_nodeConfig::ParamDescription<double>("y_upper_limit", "double", 1, "Y Upper limit", "", &compute_volume_nodeConfig::y_upper_limit)));
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.angle_threshold = 35.0;
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.angle_threshold = 90.0;
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.angle_threshold = 76.0;
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(compute_volume_nodeConfig::AbstractParamDescriptionConstPtr(new compute_volume_nodeConfig::ParamDescription<double>("angle_threshold", "double", 1, "Wrong_angle_threshold", "", &compute_volume_nodeConfig::angle_threshold)));
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(compute_volume_nodeConfig::AbstractParamDescriptionConstPtr(new compute_volume_nodeConfig::ParamDescription<double>("angle_threshold", "double", 1, "Wrong_angle_threshold", "", &compute_volume_nodeConfig::angle_threshold)));
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.real_volume = 0.01;
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.real_volume = 0.4;
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.real_volume = 0.01689;
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(compute_volume_nodeConfig::AbstractParamDescriptionConstPtr(new compute_volume_nodeConfig::ParamDescription<double>("real_volume", "double", 1, "Ground truth volume", "", &compute_volume_nodeConfig::real_volume)));
//#line 291 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(compute_volume_nodeConfig::AbstractParamDescriptionConstPtr(new compute_volume_nodeConfig::ParamDescription<double>("real_volume", "double", 1, "Ground truth volume", "", &compute_volume_nodeConfig::real_volume)));
//#line 246 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.convertParams();
//#line 246 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __group_descriptions__.push_back(compute_volume_nodeConfig::AbstractGroupDescriptionConstPtr(new compute_volume_nodeConfig::GroupDescription<compute_volume_nodeConfig::DEFAULT, compute_volume_nodeConfig>(Default)));
//#line 366 "/opt/ros/melodic/share/dynamic_reconfigure/cmake/../templates/ConfigType.h.template"

      for (std::vector<compute_volume_nodeConfig::AbstractGroupDescriptionConstPtr>::const_iterator i = __group_descriptions__.begin(); i != __group_descriptions__.end(); ++i)
      {
        __description_message__.groups.push_back(**i);
      }
      __max__.__toMessage__(__description_message__.max, __param_descriptions__, __group_descriptions__);
      __min__.__toMessage__(__description_message__.min, __param_descriptions__, __group_descriptions__);
      __default__.__toMessage__(__description_message__.dflt, __param_descriptions__, __group_descriptions__);
    }
    std::vector<compute_volume_nodeConfig::AbstractParamDescriptionConstPtr> __param_descriptions__;
    std::vector<compute_volume_nodeConfig::AbstractGroupDescriptionConstPtr> __group_descriptions__;
    compute_volume_nodeConfig __max__;
    compute_volume_nodeConfig __min__;
    compute_volume_nodeConfig __default__;
    dynamic_reconfigure::ConfigDescription __description_message__;

    static const compute_volume_nodeConfigStatics *get_instance()
    {
      // Split this off in a separate function because I know that
      // instance will get initialized the first time get_instance is
      // called, and I am guaranteeing that get_instance gets called at
      // most once.
      static compute_volume_nodeConfigStatics instance;
      return &instance;
    }
  };

  inline const dynamic_reconfigure::ConfigDescription &compute_volume_nodeConfig::__getDescriptionMessage__()
  {
    return __get_statics__()->__description_message__;
  }

  inline const compute_volume_nodeConfig &compute_volume_nodeConfig::__getDefault__()
  {
    return __get_statics__()->__default__;
  }

  inline const compute_volume_nodeConfig &compute_volume_nodeConfig::__getMax__()
  {
    return __get_statics__()->__max__;
  }

  inline const compute_volume_nodeConfig &compute_volume_nodeConfig::__getMin__()
  {
    return __get_statics__()->__min__;
  }

  inline const std::vector<compute_volume_nodeConfig::AbstractParamDescriptionConstPtr> &compute_volume_nodeConfig::__getParamDescriptions__()
  {
    return __get_statics__()->__param_descriptions__;
  }

  inline const std::vector<compute_volume_nodeConfig::AbstractGroupDescriptionConstPtr> &compute_volume_nodeConfig::__getGroupDescriptions__()
  {
    return __get_statics__()->__group_descriptions__;
  }

  inline const compute_volume_nodeConfigStatics *compute_volume_nodeConfig::__get_statics__()
  {
    const static compute_volume_nodeConfigStatics *statics;

    if (statics) // Common case
      return statics;

    boost::mutex::scoped_lock lock(dynamic_reconfigure::__init_mutex__);

    if (statics) // In case we lost a race.
      return statics;

    statics = compute_volume_nodeConfigStatics::get_instance();

    return statics;
  }


}

#undef DYNAMIC_RECONFIGURE_FINAL

#endif // __COMPUTE_VOLUME_NODERECONFIGURATOR_H__
